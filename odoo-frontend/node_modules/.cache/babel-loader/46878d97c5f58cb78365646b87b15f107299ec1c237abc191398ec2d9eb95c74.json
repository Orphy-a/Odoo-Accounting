{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api/accounting';\n\n// Mock 데이터\nconst mockAccounts = [{\n  id: 1,\n  code: '1000',\n  name: '현금',\n  type: 'asset'\n}, {\n  id: 2,\n  code: '1100',\n  name: '은행예금',\n  type: 'asset'\n}, {\n  id: 3,\n  code: '2000',\n  name: '미지급금',\n  type: 'liability'\n}, {\n  id: 4,\n  code: '3000',\n  name: '자본금',\n  type: 'equity'\n}];\nconst mockJournalEntries = [{\n  id: 1,\n  name: '초기 자본 투입',\n  date: '2024-01-15',\n  ref: 'JE001',\n  state: 'posted',\n  amount_total: 1000000,\n  line_count: 2\n}, {\n  id: 2,\n  name: '은행 예금',\n  date: '2024-01-16',\n  ref: 'JE002',\n  state: 'posted',\n  amount_total: 5000000,\n  line_count: 2\n}];\n\n// localStorage에서 Mock 데이터를 가져오거나 초기값 사용\nconst getMockPartners = () => {\n  const stored = localStorage.getItem('mockPartners');\n  if (stored) {\n    return JSON.parse(stored);\n  }\n  return [{\n    id: 1,\n    name: 'ABC 회사',\n    email: 'abc@example.com',\n    phone: '02-1234-5678',\n    type: 'customer',\n    active: true\n  }, {\n    id: 2,\n    name: 'XYZ 공급업체',\n    email: 'xyz@example.com',\n    phone: '02-9876-5432',\n    type: 'supplier',\n    active: true\n  }];\n};\nlet mockPartners = getMockPartners();\n\n// Mock 데이터를 localStorage에 저장하는 함수\nconst saveMockPartners = partners => {\n  localStorage.setItem('mockPartners', JSON.stringify(partners));\n};\nconst mockAssets = [{\n  id: 1,\n  name: '컴퓨터',\n  code: 'AST001',\n  category: '전자기기',\n  purchase_date: '2024-01-01',\n  purchase_value: 2000000,\n  current_value: 1500000,\n  depreciation_method: 'straight_line'\n}, {\n  id: 2,\n  name: '사무용 책상',\n  code: 'AST002',\n  category: '가구',\n  purchase_date: '2024-01-01',\n  purchase_value: 500000,\n  current_value: 400000,\n  depreciation_method: 'straight_line'\n}];\nconst mockBudgets = [{\n  id: 1,\n  name: '2024년 예산',\n  fiscal_year: '2024',\n  amount: 10000000,\n  spent_amount: 3000000,\n  remaining_amount: 7000000,\n  state: 'active'\n}, {\n  id: 2,\n  name: '마케팅 예산',\n  fiscal_year: '2024',\n  amount: 2000000,\n  spent_amount: 800000,\n  remaining_amount: 1200000,\n  state: 'active'\n}];\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Health Check\nexport const checkHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    return {\n      success: true,\n      message: 'Mock 모드로 실행 중'\n    };\n  }\n};\n\n// 계정과목 API\nexport const getAccounts = async () => {\n  try {\n    const response = await api.get('/accounts');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockAccounts\n    };\n  }\n};\nexport const createAccount = async account => {\n  try {\n    const response = await api.post('/accounts', account);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    const newAccount = {\n      ...account,\n      id: Date.now()\n    };\n    return {\n      success: true,\n      data: newAccount\n    };\n  }\n};\nexport const updateAccount = async (id, account) => {\n  try {\n    const response = await api.put(`/accounts/${id}`, account);\n    return response.data;\n  } catch (error) {\n    return {\n      success: true,\n      message: 'Mock 모드에서 수정됨'\n    };\n  }\n};\nexport const deleteAccount = async id => {\n  try {\n    const response = await api.delete(`/accounts/${id}`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: true,\n      message: 'Mock 모드에서 삭제됨'\n    };\n  }\n};\n\n// 분개장 API\nexport const getJournalEntries = async () => {\n  try {\n    const response = await api.get('/journal-entries');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockJournalEntries\n    };\n  }\n};\nexport const createJournalEntry = async entry => {\n  try {\n    const response = await api.post('/journal-entries', entry);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    const newEntry = {\n      ...entry,\n      id: Date.now()\n    };\n    return {\n      success: true,\n      data: newEntry\n    };\n  }\n};\n\n// 거래처 API\nexport const getPartners = async () => {\n  try {\n    const response = await api.get('/partners');\n    return response.data;\n  } catch (error) {\n    // localStorage에서 최신 Mock 데이터 가져오기\n    mockPartners = getMockPartners();\n    console.log('getPartners - localStorage에서 가져온 데이터:', mockPartners);\n    return {\n      success: true,\n      data: mockPartners\n    };\n  }\n};\nexport const createPartner = async partner => {\n  try {\n    const response = await api.post('/partners', partner);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터에 추가\n    const newPartner = {\n      ...partner,\n      id: Date.now()\n    };\n    mockPartners.push(newPartner);\n    saveMockPartners(mockPartners);\n    return {\n      success: true,\n      data: newPartner\n    };\n  }\n};\nexport const updatePartner = async (id, partner) => {\n  try {\n    const response = await api.put(`/partners/${id}`, partner);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 업데이트\n    console.log('Mock 데이터 업데이트 중:', id, partner);\n    console.log('현재 Mock 데이터:', mockPartners);\n    const index = mockPartners.findIndex(p => p.id === id);\n    console.log('찾은 인덱스:', index);\n    if (index !== -1) {\n      mockPartners[index] = {\n        ...mockPartners[index],\n        ...partner\n      };\n      console.log('업데이트된 Mock 데이터:', mockPartners);\n    } else {\n      // ID가 없으면 새로 추가\n      console.log('ID를 찾을 수 없어 새로 추가합니다.');\n      const newPartner = {\n        ...partner,\n        id\n      };\n      mockPartners.push(newPartner);\n    }\n    saveMockPartners(mockPartners);\n    const updatedPartner = {\n      ...partner,\n      id\n    };\n    return {\n      success: true,\n      data: updatedPartner\n    };\n  }\n};\nexport const deletePartner = async id => {\n  try {\n    const response = await api.delete(`/partners/${id}`);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터에서 삭제\n    mockPartners = mockPartners.filter(p => p.id !== id);\n    saveMockPartners(mockPartners);\n    return {\n      success: true,\n      message: 'Mock 모드에서 삭제됨'\n    };\n  }\n};\n\n// 고정자산 API\nexport const getAssets = async () => {\n  try {\n    const response = await api.get('/assets');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockAssets\n    };\n  }\n};\nexport const createAsset = async asset => {\n  try {\n    const response = await api.post('/assets', asset);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    const newAsset = {\n      ...asset,\n      id: Date.now()\n    };\n    return {\n      success: true,\n      data: newAsset\n    };\n  }\n};\n\n// 예산 API\nexport const getBudgets = async () => {\n  try {\n    const response = await api.get('/budgets');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockBudgets\n    };\n  }\n};\n\n// 통화 API\nexport const getCurrencies = async () => {\n  try {\n    const response = await api.get('/currencies');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: [{\n        id: 1,\n        name: 'KRW',\n        code: 'KRW',\n        symbol: '₩',\n        rate: 1.0,\n        active: true\n      }, {\n        id: 2,\n        name: 'USD',\n        code: 'USD',\n        symbol: '$',\n        rate: 1300.0,\n        active: true\n      }, {\n        id: 3,\n        name: 'EUR',\n        code: 'EUR',\n        symbol: '€',\n        rate: 1400.0,\n        active: true\n      }]\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","mockAccounts","id","code","name","type","mockJournalEntries","date","ref","state","amount_total","line_count","getMockPartners","stored","localStorage","getItem","JSON","parse","email","phone","active","mockPartners","saveMockPartners","partners","setItem","stringify","mockAssets","category","purchase_date","purchase_value","current_value","depreciation_method","mockBudgets","fiscal_year","amount","spent_amount","remaining_amount","api","create","baseURL","headers","checkHealth","response","get","data","error","success","message","getAccounts","createAccount","account","post","newAccount","Date","now","updateAccount","put","deleteAccount","delete","getJournalEntries","createJournalEntry","entry","newEntry","getPartners","console","log","createPartner","partner","newPartner","push","updatePartner","index","findIndex","p","updatedPartner","deletePartner","filter","getAssets","createAsset","asset","newAsset","getBudgets","getCurrencies","symbol","rate"],"sources":["C:/Users/jaeyeong/Desktop/workspace/odoo-frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ApiResponse, Account, JournalEntry, Partner, Asset, Budget, Currency } from '../types';\r\n\r\nconst API_BASE_URL = '/api/accounting';\r\n\r\n// Mock 데이터\r\nconst mockAccounts: Account[] = [\r\n  { id: 1, code: '1000', name: '현금', type: 'asset' },\r\n  { id: 2, code: '1100', name: '은행예금', type: 'asset' },\r\n  { id: 3, code: '2000', name: '미지급금', type: 'liability' },\r\n  { id: 4, code: '3000', name: '자본금', type: 'equity' },\r\n];\r\n\r\nconst mockJournalEntries: JournalEntry[] = [\r\n  { id: 1, name: '초기 자본 투입', date: '2024-01-15', ref: 'JE001', state: 'posted', amount_total: 1000000, line_count: 2 },\r\n  { id: 2, name: '은행 예금', date: '2024-01-16', ref: 'JE002', state: 'posted', amount_total: 5000000, line_count: 2 },\r\n];\r\n\r\n// localStorage에서 Mock 데이터를 가져오거나 초기값 사용\r\nconst getMockPartners = (): Partner[] => {\r\n  const stored = localStorage.getItem('mockPartners');\r\n  if (stored) {\r\n    return JSON.parse(stored);\r\n  }\r\n  return [\r\n    { id: 1, name: 'ABC 회사', email: 'abc@example.com', phone: '02-1234-5678', type: 'customer', active: true },\r\n    { id: 2, name: 'XYZ 공급업체', email: 'xyz@example.com', phone: '02-9876-5432', type: 'supplier', active: true },\r\n  ];\r\n};\r\n\r\nlet mockPartners: Partner[] = getMockPartners();\r\n\r\n// Mock 데이터를 localStorage에 저장하는 함수\r\nconst saveMockPartners = (partners: Partner[]) => {\r\n  localStorage.setItem('mockPartners', JSON.stringify(partners));\r\n};\r\n\r\nconst mockAssets: Asset[] = [\r\n  { id: 1, name: '컴퓨터', code: 'AST001', category: '전자기기', purchase_date: '2024-01-01', purchase_value: 2000000, current_value: 1500000, depreciation_method: 'straight_line' },\r\n  { id: 2, name: '사무용 책상', code: 'AST002', category: '가구', purchase_date: '2024-01-01', purchase_value: 500000, current_value: 400000, depreciation_method: 'straight_line' },\r\n];\r\n\r\nconst mockBudgets: Budget[] = [\r\n  { id: 1, name: '2024년 예산', fiscal_year: '2024', amount: 10000000, spent_amount: 3000000, remaining_amount: 7000000, state: 'active' },\r\n  { id: 2, name: '마케팅 예산', fiscal_year: '2024', amount: 2000000, spent_amount: 800000, remaining_amount: 1200000, state: 'active' },\r\n];\r\n\r\n// axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Health Check\r\nexport const checkHealth = async (): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    return { success: true, message: 'Mock 모드로 실행 중' };\r\n  }\r\n};\r\n\r\n// 계정과목 API\r\nexport const getAccounts = async (): Promise<ApiResponse<Account[]>> => {\r\n  try {\r\n    const response = await api.get('/accounts');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockAccounts };\r\n  }\r\n};\r\n\r\nexport const createAccount = async (account: Partial<Account>): Promise<ApiResponse<Account>> => {\r\n  try {\r\n    const response = await api.post('/accounts', account);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    const newAccount = { ...account, id: Date.now() } as Account;\r\n    return { success: true, data: newAccount };\r\n  }\r\n};\r\n\r\nexport const updateAccount = async (id: number, account: Partial<Account>): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.put(`/accounts/${id}`, account);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: true, message: 'Mock 모드에서 수정됨' };\r\n  }\r\n};\r\n\r\nexport const deleteAccount = async (id: number): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.delete(`/accounts/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: true, message: 'Mock 모드에서 삭제됨' };\r\n  }\r\n};\r\n\r\n// 분개장 API\r\nexport const getJournalEntries = async (): Promise<ApiResponse<JournalEntry[]>> => {\r\n  try {\r\n    const response = await api.get('/journal-entries');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockJournalEntries };\r\n  }\r\n};\r\n\r\nexport const createJournalEntry = async (entry: any): Promise<ApiResponse<JournalEntry>> => {\r\n  try {\r\n    const response = await api.post('/journal-entries', entry);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    const newEntry = { ...entry, id: Date.now() } as JournalEntry;\r\n    return { success: true, data: newEntry };\r\n  }\r\n};\r\n\r\n// 거래처 API\r\nexport const getPartners = async (): Promise<ApiResponse<Partner[]>> => {\r\n  try {\r\n    const response = await api.get('/partners');\r\n    return response.data;\r\n  } catch (error) {\r\n    // localStorage에서 최신 Mock 데이터 가져오기\r\n    mockPartners = getMockPartners();\r\n    console.log('getPartners - localStorage에서 가져온 데이터:', mockPartners);\r\n    return { success: true, data: mockPartners };\r\n  }\r\n};\r\n\r\nexport const createPartner = async (partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\r\n  try {\r\n    const response = await api.post('/partners', partner);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터에 추가\r\n    const newPartner = { ...partner, id: Date.now() } as Partner;\r\n    mockPartners.push(newPartner);\r\n    saveMockPartners(mockPartners);\r\n    return { success: true, data: newPartner };\r\n  }\r\n};\r\n\r\nexport const updatePartner = async (id: number, partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\r\n  try {\r\n    const response = await api.put(`/partners/${id}`, partner);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 업데이트\r\n    console.log('Mock 데이터 업데이트 중:', id, partner);\r\n    console.log('현재 Mock 데이터:', mockPartners);\r\n    const index = mockPartners.findIndex(p => p.id === id);\r\n    console.log('찾은 인덱스:', index);\r\n    if (index !== -1) {\r\n      mockPartners[index] = { ...mockPartners[index], ...partner };\r\n      console.log('업데이트된 Mock 데이터:', mockPartners);\r\n    } else {\r\n      // ID가 없으면 새로 추가\r\n      console.log('ID를 찾을 수 없어 새로 추가합니다.');\r\n      const newPartner = { ...partner, id } as Partner;\r\n      mockPartners.push(newPartner);\r\n    }\r\n    saveMockPartners(mockPartners);\r\n    const updatedPartner = { ...partner, id } as Partner;\r\n    return { success: true, data: updatedPartner };\r\n  }\r\n};\r\n\r\nexport const deletePartner = async (id: number): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.delete(`/partners/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터에서 삭제\r\n    mockPartners = mockPartners.filter(p => p.id !== id);\r\n    saveMockPartners(mockPartners);\r\n    return { success: true, message: 'Mock 모드에서 삭제됨' };\r\n  }\r\n};\r\n\r\n// 고정자산 API\r\nexport const getAssets = async (): Promise<ApiResponse<Asset[]>> => {\r\n  try {\r\n    const response = await api.get('/assets');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockAssets };\r\n  }\r\n};\r\n\r\nexport const createAsset = async (asset: Partial<Asset>): Promise<ApiResponse<Asset>> => {\r\n  try {\r\n    const response = await api.post('/assets', asset);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    const newAsset = { ...asset, id: Date.now() } as Asset;\r\n    return { success: true, data: newAsset };\r\n  }\r\n};\r\n\r\n// 예산 API\r\nexport const getBudgets = async (): Promise<ApiResponse<Budget[]>> => {\r\n  try {\r\n    const response = await api.get('/budgets');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockBudgets };\r\n  }\r\n};\r\n\r\n// 통화 API\r\nexport const getCurrencies = async (): Promise<ApiResponse<Currency[]>> => {\r\n  try {\r\n    const response = await api.get('/currencies');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: [\r\n      { id: 1, name: 'KRW', code: 'KRW', symbol: '₩', rate: 1.0, active: true },\r\n      { id: 2, name: 'USD', code: 'USD', symbol: '$', rate: 1300.0, active: true },\r\n      { id: 3, name: 'EUR', code: 'EUR', symbol: '€', rate: 1400.0, active: true },\r\n    ]};\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,iBAAiB;;AAEtC;AACA,MAAMC,YAAuB,GAAG,CAC9B;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE;AAAQ,CAAC,EAClD;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAQ,CAAC,EACpD;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAY,CAAC,EACxD;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE,KAAK;EAAEC,IAAI,EAAE;AAAS,CAAC,CACrD;AAED,MAAMC,kBAAkC,GAAG,CACzC;EAAEJ,EAAE,EAAE,CAAC;EAAEE,IAAI,EAAE,UAAU;EAAEG,IAAI,EAAE,YAAY;EAAEC,GAAG,EAAE,OAAO;EAAEC,KAAK,EAAE,QAAQ;EAAEC,YAAY,EAAE,OAAO;EAAEC,UAAU,EAAE;AAAE,CAAC,EACpH;EAAET,EAAE,EAAE,CAAC;EAAEE,IAAI,EAAE,OAAO;EAAEG,IAAI,EAAE,YAAY;EAAEC,GAAG,EAAE,OAAO;EAAEC,KAAK,EAAE,QAAQ;EAAEC,YAAY,EAAE,OAAO;EAAEC,UAAU,EAAE;AAAE,CAAC,CAClH;;AAED;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAiB;EACvC,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACnD,IAAIF,MAAM,EAAE;IACV,OAAOG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;EAC3B;EACA,OAAO,CACL;IAAEX,EAAE,EAAE,CAAC;IAAEE,IAAI,EAAE,QAAQ;IAAEc,KAAK,EAAE,iBAAiB;IAAEC,KAAK,EAAE,cAAc;IAAEd,IAAI,EAAE,UAAU;IAAEe,MAAM,EAAE;EAAK,CAAC,EAC1G;IAAElB,EAAE,EAAE,CAAC;IAAEE,IAAI,EAAE,UAAU;IAAEc,KAAK,EAAE,iBAAiB;IAAEC,KAAK,EAAE,cAAc;IAAEd,IAAI,EAAE,UAAU;IAAEe,MAAM,EAAE;EAAK,CAAC,CAC7G;AACH,CAAC;AAED,IAAIC,YAAuB,GAAGT,eAAe,CAAC,CAAC;;AAE/C;AACA,MAAMU,gBAAgB,GAAIC,QAAmB,IAAK;EAChDT,YAAY,CAACU,OAAO,CAAC,cAAc,EAAER,IAAI,CAACS,SAAS,CAACF,QAAQ,CAAC,CAAC;AAChE,CAAC;AAED,MAAMG,UAAmB,GAAG,CAC1B;EAAExB,EAAE,EAAE,CAAC;EAAEE,IAAI,EAAE,KAAK;EAAED,IAAI,EAAE,QAAQ;EAAEwB,QAAQ,EAAE,MAAM;EAAEC,aAAa,EAAE,YAAY;EAAEC,cAAc,EAAE,OAAO;EAAEC,aAAa,EAAE,OAAO;EAAEC,mBAAmB,EAAE;AAAgB,CAAC,EAC5K;EAAE7B,EAAE,EAAE,CAAC;EAAEE,IAAI,EAAE,QAAQ;EAAED,IAAI,EAAE,QAAQ;EAAEwB,QAAQ,EAAE,IAAI;EAAEC,aAAa,EAAE,YAAY;EAAEC,cAAc,EAAE,MAAM;EAAEC,aAAa,EAAE,MAAM;EAAEC,mBAAmB,EAAE;AAAgB,CAAC,CAC5K;AAED,MAAMC,WAAqB,GAAG,CAC5B;EAAE9B,EAAE,EAAE,CAAC;EAAEE,IAAI,EAAE,UAAU;EAAE6B,WAAW,EAAE,MAAM;EAAEC,MAAM,EAAE,QAAQ;EAAEC,YAAY,EAAE,OAAO;EAAEC,gBAAgB,EAAE,OAAO;EAAE3B,KAAK,EAAE;AAAS,CAAC,EACrI;EAAEP,EAAE,EAAE,CAAC;EAAEE,IAAI,EAAE,QAAQ;EAAE6B,WAAW,EAAE,MAAM;EAAEC,MAAM,EAAE,OAAO;EAAEC,YAAY,EAAE,MAAM;EAAEC,gBAAgB,EAAE,OAAO;EAAE3B,KAAK,EAAE;AAAS,CAAC,CAClI;;AAED;AACA,MAAM4B,GAAG,GAAGtC,KAAK,CAACuC,MAAM,CAAC;EACvBC,OAAO,EAAEvC,YAAY;EACrBwC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAkC;EAC3D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAgB,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAA6C;EACtE,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAE3C;IAAa,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMgD,aAAa,GAAG,MAAOC,OAAyB,IAAoC;EAC/F,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAML,GAAG,CAACc,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC;IACrD,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,MAAMO,UAAU,GAAG;MAAE,GAAGF,OAAO;MAAEhD,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC;IAAE,CAAY;IAC5D,OAAO;MAAER,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEQ;IAAW,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAOrD,EAAU,EAAEgD,OAAyB,KAA2B;EAClG,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAML,GAAG,CAACmB,GAAG,CAAC,aAAatD,EAAE,EAAE,EAAEgD,OAAO,CAAC;IAC1D,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAgB,CAAC;EACpD;AACF,CAAC;AAED,OAAO,MAAMU,aAAa,GAAG,MAAOvD,EAAU,IAA2B;EACvE,IAAI;IACF,MAAMwC,QAAQ,GAAG,MAAML,GAAG,CAACqB,MAAM,CAAC,aAAaxD,EAAE,EAAE,CAAC;IACpD,OAAOwC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAgB,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAkD;EACjF,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEtC;IAAmB,CAAC;EACpD;AACF,CAAC;AAED,OAAO,MAAMsD,kBAAkB,GAAG,MAAOC,KAAU,IAAyC;EAC1F,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAML,GAAG,CAACc,IAAI,CAAC,kBAAkB,EAAEU,KAAK,CAAC;IAC1D,OAAOnB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,MAAMiB,QAAQ,GAAG;MAAE,GAAGD,KAAK;MAAE3D,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC;IAAE,CAAiB;IAC7D,OAAO;MAAER,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEkB;IAAS,CAAC;EAC1C;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAA6C;EACtE,IAAI;IACF,MAAMrB,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAxB,YAAY,GAAGT,eAAe,CAAC,CAAC;IAChCoD,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE5C,YAAY,CAAC;IAClE,OAAO;MAAEyB,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEvB;IAAa,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAM6C,aAAa,GAAG,MAAOC,OAAyB,IAAoC;EAC/F,IAAI;IACF,MAAMzB,QAAQ,GAAG,MAAML,GAAG,CAACc,IAAI,CAAC,WAAW,EAAEgB,OAAO,CAAC;IACrD,OAAOzB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,MAAMuB,UAAU,GAAG;MAAE,GAAGD,OAAO;MAAEjE,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC;IAAE,CAAY;IAC5DjC,YAAY,CAACgD,IAAI,CAACD,UAAU,CAAC;IAC7B9C,gBAAgB,CAACD,YAAY,CAAC;IAC9B,OAAO;MAAEyB,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEwB;IAAW,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOpE,EAAU,EAAEiE,OAAyB,KAAoC;EAC3G,IAAI;IACF,MAAMzB,QAAQ,GAAG,MAAML,GAAG,CAACmB,GAAG,CAAC,aAAatD,EAAE,EAAE,EAAEiE,OAAO,CAAC;IAC1D,OAAOzB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAmB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE/D,EAAE,EAAEiE,OAAO,CAAC;IAC5CH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE5C,YAAY,CAAC;IACzC,MAAMkD,KAAK,GAAGlD,YAAY,CAACmD,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACvE,EAAE,KAAKA,EAAE,CAAC;IACtD8D,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,KAAK,CAAC;IAC7B,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBlD,YAAY,CAACkD,KAAK,CAAC,GAAG;QAAE,GAAGlD,YAAY,CAACkD,KAAK,CAAC;QAAE,GAAGJ;MAAQ,CAAC;MAC5DH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE5C,YAAY,CAAC;IAC9C,CAAC,MAAM;MACL;MACA2C,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAMG,UAAU,GAAG;QAAE,GAAGD,OAAO;QAAEjE;MAAG,CAAY;MAChDmB,YAAY,CAACgD,IAAI,CAACD,UAAU,CAAC;IAC/B;IACA9C,gBAAgB,CAACD,YAAY,CAAC;IAC9B,MAAMqD,cAAc,GAAG;MAAE,GAAGP,OAAO;MAAEjE;IAAG,CAAY;IACpD,OAAO;MAAE4C,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAE8B;IAAe,CAAC;EAChD;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOzE,EAAU,IAA2B;EACvE,IAAI;IACF,MAAMwC,QAAQ,GAAG,MAAML,GAAG,CAACqB,MAAM,CAAC,aAAaxD,EAAE,EAAE,CAAC;IACpD,OAAOwC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAxB,YAAY,GAAGA,YAAY,CAACuD,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACvE,EAAE,KAAKA,EAAE,CAAC;IACpDoB,gBAAgB,CAACD,YAAY,CAAC;IAC9B,OAAO;MAAEyB,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAgB,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAM8B,SAAS,GAAG,MAAAA,CAAA,KAA2C;EAClE,IAAI;IACF,MAAMnC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAElB;IAAW,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMoD,WAAW,GAAG,MAAOC,KAAqB,IAAkC;EACvF,IAAI;IACF,MAAMrC,QAAQ,GAAG,MAAML,GAAG,CAACc,IAAI,CAAC,SAAS,EAAE4B,KAAK,CAAC;IACjD,OAAOrC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,MAAMmC,QAAQ,GAAG;MAAE,GAAGD,KAAK;MAAE7E,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC;IAAE,CAAU;IACtD,OAAO;MAAER,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEoC;IAAS,CAAC;EAC1C;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAA4C;EACpE,IAAI;IACF,MAAMvC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAEZ;IAAY,CAAC;EAC7C;AACF,CAAC;;AAED;AACA,OAAO,MAAMkD,aAAa,GAAG,MAAAA,CAAA,KAA8C;EACzE,IAAI;IACF,MAAMxC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF,IAAI,EAAE,CAC5B;QAAE1C,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,KAAK;QAAED,IAAI,EAAE,KAAK;QAAEgF,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE,GAAG;QAAEhE,MAAM,EAAE;MAAK,CAAC,EACzE;QAAElB,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,KAAK;QAAED,IAAI,EAAE,KAAK;QAAEgF,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEhE,MAAM,EAAE;MAAK,CAAC,EAC5E;QAAElB,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,KAAK;QAAED,IAAI,EAAE,KAAK;QAAEgF,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEhE,MAAM,EAAE;MAAK,CAAC;IAC7E,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}