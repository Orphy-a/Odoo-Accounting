{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api/accounting';\n\n// localStorage에서 Mock 계정과목 데이터를 가져오거나 초기값 사용\nconst getMockAccounts = () => {\n  const stored = localStorage.getItem('odoo_frontend_mock_accounts');\n  console.log('계정과목 localStorage에서 읽은 데이터:', stored);\n  if (stored && stored !== 'null' && stored !== 'undefined') {\n    try {\n      const parsed = JSON.parse(stored);\n      console.log('계정과목 파싱된 데이터:', parsed);\n      if (Array.isArray(parsed) && parsed.length > 0) {\n        console.log('계정과목 localStorage에서 유효한 데이터를 찾았습니다.');\n        return parsed;\n      }\n    } catch (error) {\n      console.error('계정과목 JSON 파싱 오류:', error);\n      localStorage.removeItem('odoo_frontend_mock_accounts');\n    }\n  }\n  console.log('계정과목 localStorage에 데이터가 없어 초기값 사용');\n  return [{\n    id: 1,\n    code: '1000',\n    name: '현금',\n    type: 'asset'\n  }, {\n    id: 2,\n    code: '1100',\n    name: '은행예금',\n    type: 'asset'\n  }, {\n    id: 3,\n    code: '2000',\n    name: '미지급금',\n    type: 'liability'\n  }, {\n    id: 4,\n    code: '3000',\n    name: '자본금',\n    type: 'equity'\n  }];\n};\nlet mockAccounts = getMockAccounts();\n\n// Mock 계정과목 데이터를 localStorage에 저장하는 함수\nconst saveMockAccounts = accounts => {\n  console.log('계정과목 localStorage에 저장 중:', accounts);\n  try {\n    localStorage.setItem('odoo_frontend_mock_accounts', JSON.stringify(accounts));\n    console.log('계정과목 localStorage 저장 완료');\n  } catch (error) {\n    console.error('계정과목 localStorage 저장 오류:', error);\n  }\n};\nconst mockJournalEntries = [{\n  id: 1,\n  name: '초기 자본 투입',\n  date: '2024-01-15',\n  ref: 'JE001',\n  state: 'posted',\n  amount_total: 1000000,\n  line_count: 2\n}, {\n  id: 2,\n  name: '은행 예금',\n  date: '2024-01-16',\n  ref: 'JE002',\n  state: 'posted',\n  amount_total: 5000000,\n  line_count: 2\n}];\n\n// localStorage에서 Mock 데이터를 가져오거나 초기값 사용\nconst getMockPartners = () => {\n  // 기존 키도 확인하고 삭제\n  const oldStored = localStorage.getItem('odoo_frontend_mock_partners');\n  if (oldStored) {\n    console.log('기존 키 데이터 발견, 삭제 중:', oldStored);\n    localStorage.removeItem('odoo_frontend_mock_partners');\n  }\n  const stored = localStorage.getItem('odoo_frontend_mock_partners_v2');\n  console.log('localStorage에서 읽은 데이터:', stored);\n  if (stored && stored !== 'null' && stored !== 'undefined') {\n    try {\n      const parsed = JSON.parse(stored);\n      console.log('파싱된 데이터:', parsed);\n      if (Array.isArray(parsed) && parsed.length > 0) {\n        console.log('localStorage에서 유효한 데이터를 찾았습니다.');\n        return parsed;\n      }\n    } catch (error) {\n      console.error('JSON 파싱 오류:', error);\n      localStorage.removeItem('odoo_frontend_mock_partners_v2');\n    }\n  }\n  console.log('localStorage에 데이터가 없어 초기값 사용');\n  return [{\n    id: 1,\n    name: 'ABC 회사',\n    email: 'abc@example.com',\n    phone: '02-1234-5678',\n    type: 'customer',\n    active: true\n  }, {\n    id: 2,\n    name: 'XYZ 공급업체',\n    email: 'xyz@example.com',\n    phone: '02-9876-5432',\n    type: 'supplier',\n    active: true\n  }];\n};\nlet mockPartners = getMockPartners();\n\n// Mock 데이터를 localStorage에 저장하는 함수\nconst saveMockPartners = partners => {\n  console.log('localStorage에 저장 중:', partners);\n  try {\n    localStorage.setItem('odoo_frontend_mock_partners_v2', JSON.stringify(partners));\n    console.log('localStorage 저장 완료');\n  } catch (error) {\n    console.error('localStorage 저장 오류:', error);\n  }\n};\nconst mockAssets = [{\n  id: 1,\n  name: '컴퓨터',\n  code: 'AST001',\n  category: '전자기기',\n  purchase_date: '2024-01-01',\n  purchase_value: 2000000,\n  current_value: 1500000,\n  depreciation_method: 'straight_line'\n}, {\n  id: 2,\n  name: '사무용 책상',\n  code: 'AST002',\n  category: '가구',\n  purchase_date: '2024-01-01',\n  purchase_value: 500000,\n  current_value: 400000,\n  depreciation_method: 'straight_line'\n}];\nconst mockBudgets = [{\n  id: 1,\n  name: '2024년 예산',\n  fiscal_year: '2024',\n  amount: 10000000,\n  spent_amount: 3000000,\n  remaining_amount: 7000000,\n  state: 'active'\n}, {\n  id: 2,\n  name: '마케팅 예산',\n  fiscal_year: '2024',\n  amount: 2000000,\n  spent_amount: 800000,\n  remaining_amount: 1200000,\n  state: 'active'\n}];\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Health Check\nexport const checkHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    return {\n      success: true,\n      message: 'Mock 모드로 실행 중'\n    };\n  }\n};\n\n// 계정과목 API\nexport const getAccounts = async () => {\n  try {\n    const response = await api.get('/accounts');\n    return response.data;\n  } catch (error) {\n    // localStorage에서 최신 Mock 데이터 가져오기\n    mockAccounts = getMockAccounts();\n    console.log('getAccounts - localStorage에서 가져온 데이터:', mockAccounts);\n    return {\n      success: true,\n      data: mockAccounts\n    };\n  }\n};\nexport const createAccount = async account => {\n  try {\n    const response = await api.post('/accounts', account);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터에 추가\n    const newAccount = {\n      ...account,\n      id: Date.now()\n    };\n    mockAccounts.push(newAccount);\n    saveMockAccounts(mockAccounts);\n    return {\n      success: true,\n      data: newAccount\n    };\n  }\n};\nexport const updateAccount = async (id, account) => {\n  try {\n    const response = await api.put(`/accounts/${id}`, account);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 업데이트\n    console.log('계정과목 Mock 데이터 업데이트 중:', id, account);\n    const index = mockAccounts.findIndex(a => a.id === id);\n    if (index !== -1) {\n      mockAccounts[index] = {\n        ...mockAccounts[index],\n        ...account\n      };\n      saveMockAccounts(mockAccounts);\n    }\n    return {\n      success: true,\n      message: 'Mock 모드에서 수정됨'\n    };\n  }\n};\nexport const deleteAccount = async id => {\n  try {\n    const response = await api.delete(`/accounts/${id}`);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터에서 삭제\n    console.log('계정과목 Mock 데이터 삭제 중:', id);\n    mockAccounts = mockAccounts.filter(a => a.id !== id);\n    saveMockAccounts(mockAccounts);\n    return {\n      success: true,\n      message: 'Mock 모드에서 삭제됨'\n    };\n  }\n};\n\n// 분개장 API\nexport const getJournalEntries = async () => {\n  try {\n    const response = await api.get('/journal-entries');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockJournalEntries\n    };\n  }\n};\nexport const createJournalEntry = async entry => {\n  try {\n    const response = await api.post('/journal-entries', entry);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    const newEntry = {\n      ...entry,\n      id: Date.now()\n    };\n    return {\n      success: true,\n      data: newEntry\n    };\n  }\n};\n\n// 거래처 API\nexport const getPartners = async () => {\n  // 백엔드 연결을 시도하지 않고 바로 Mock 데이터 사용\n  console.log('Mock 모드로 실행 중 - 백엔드 연결 시도하지 않음');\n\n  // localStorage에서 최신 Mock 데이터 가져오기\n  const stored = localStorage.getItem('odoo_frontend_mock_partners_v2');\n  console.log('getPartners - localStorage 원본 데이터:', stored);\n  if (stored && stored !== 'null' && stored !== 'undefined') {\n    try {\n      const parsed = JSON.parse(stored);\n      console.log('getPartners - 파싱된 데이터:', parsed);\n      if (Array.isArray(parsed) && parsed.length > 0) {\n        mockPartners = parsed;\n        console.log('getPartners - localStorage에서 데이터 사용:', mockPartners);\n        return {\n          success: true,\n          data: mockPartners\n        };\n      }\n    } catch (error) {\n      console.error('getPartners - JSON 파싱 오류:', error);\n    }\n  }\n\n  // localStorage에 데이터가 없으면 초기값 사용\n  mockPartners = getMockPartners();\n  console.log('getPartners - 초기값 사용:', mockPartners);\n  return {\n    success: true,\n    data: mockPartners\n  };\n};\nexport const createPartner = async partner => {\n  try {\n    const response = await api.post('/partners', partner);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터에 추가\n    const newPartner = {\n      ...partner,\n      id: Date.now()\n    };\n    mockPartners.push(newPartner);\n    saveMockPartners(mockPartners);\n    return {\n      success: true,\n      data: newPartner\n    };\n  }\n};\nexport const updatePartner = async (id, partner) => {\n  try {\n    const response = await api.put(`/partners/${id}`, partner);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 업데이트\n    console.log('Mock 데이터 업데이트 중:', id, partner);\n    console.log('현재 Mock 데이터:', mockPartners);\n    const index = mockPartners.findIndex(p => p.id === id);\n    console.log('찾은 인덱스:', index);\n    if (index !== -1) {\n      mockPartners[index] = {\n        ...mockPartners[index],\n        ...partner\n      };\n      console.log('업데이트된 Mock 데이터:', mockPartners);\n    } else {\n      // ID가 없으면 새로 추가\n      console.log('ID를 찾을 수 없어 새로 추가합니다.');\n      const newPartner = {\n        ...partner,\n        id\n      };\n      mockPartners.push(newPartner);\n    }\n    saveMockPartners(mockPartners);\n    const updatedPartner = {\n      ...partner,\n      id\n    };\n    return {\n      success: true,\n      data: updatedPartner\n    };\n  }\n};\nexport const deletePartner = async id => {\n  try {\n    const response = await api.delete(`/partners/${id}`);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터에서 삭제\n    mockPartners = mockPartners.filter(p => p.id !== id);\n    saveMockPartners(mockPartners);\n    return {\n      success: true,\n      message: 'Mock 모드에서 삭제됨'\n    };\n  }\n};\n\n// 고정자산 API\nexport const getAssets = async () => {\n  try {\n    const response = await api.get('/assets');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockAssets\n    };\n  }\n};\nexport const createAsset = async asset => {\n  try {\n    const response = await api.post('/assets', asset);\n    return response.data;\n  } catch (error) {\n    // Mock 데이터로 성공 응답\n    const newAsset = {\n      ...asset,\n      id: Date.now()\n    };\n    return {\n      success: true,\n      data: newAsset\n    };\n  }\n};\n\n// 예산 API\nexport const getBudgets = async () => {\n  try {\n    const response = await api.get('/budgets');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: mockBudgets\n    };\n  }\n};\n\n// 통화 API\nexport const getCurrencies = async () => {\n  try {\n    const response = await api.get('/currencies');\n    return response.data;\n  } catch (error) {\n    // Mock 데이터 반환\n    return {\n      success: true,\n      data: [{\n        id: 1,\n        name: 'KRW',\n        code: 'KRW',\n        symbol: '₩',\n        rate: 1.0,\n        active: true\n      }, {\n        id: 2,\n        name: 'USD',\n        code: 'USD',\n        symbol: '$',\n        rate: 1300.0,\n        active: true\n      }, {\n        id: 3,\n        name: 'EUR',\n        code: 'EUR',\n        symbol: '€',\n        rate: 1400.0,\n        active: true\n      }]\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getMockAccounts","stored","localStorage","getItem","console","log","parsed","JSON","parse","Array","isArray","length","error","removeItem","id","code","name","type","mockAccounts","saveMockAccounts","accounts","setItem","stringify","mockJournalEntries","date","ref","state","amount_total","line_count","getMockPartners","oldStored","email","phone","active","mockPartners","saveMockPartners","partners","mockAssets","category","purchase_date","purchase_value","current_value","depreciation_method","mockBudgets","fiscal_year","amount","spent_amount","remaining_amount","api","create","baseURL","headers","checkHealth","response","get","data","success","message","getAccounts","createAccount","account","post","newAccount","Date","now","push","updateAccount","put","index","findIndex","a","deleteAccount","delete","filter","getJournalEntries","createJournalEntry","entry","newEntry","getPartners","createPartner","partner","newPartner","updatePartner","p","updatedPartner","deletePartner","getAssets","createAsset","asset","newAsset","getBudgets","getCurrencies","symbol","rate"],"sources":["C:/Users/jaeyeong/Desktop/workspace/odoo-frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ApiResponse, Account, JournalEntry, Partner, Asset, Budget, Currency } from '../types';\r\n\r\nconst API_BASE_URL = '/api/accounting';\r\n\r\n// localStorage에서 Mock 계정과목 데이터를 가져오거나 초기값 사용\r\nconst getMockAccounts = (): Account[] => {\r\n  const stored = localStorage.getItem('odoo_frontend_mock_accounts');\r\n  console.log('계정과목 localStorage에서 읽은 데이터:', stored);\r\n  if (stored && stored !== 'null' && stored !== 'undefined') {\r\n    try {\r\n      const parsed = JSON.parse(stored);\r\n      console.log('계정과목 파싱된 데이터:', parsed);\r\n      if (Array.isArray(parsed) && parsed.length > 0) {\r\n        console.log('계정과목 localStorage에서 유효한 데이터를 찾았습니다.');\r\n        return parsed;\r\n      }\r\n    } catch (error) {\r\n      console.error('계정과목 JSON 파싱 오류:', error);\r\n      localStorage.removeItem('odoo_frontend_mock_accounts');\r\n    }\r\n  }\r\n  console.log('계정과목 localStorage에 데이터가 없어 초기값 사용');\r\n  return [\r\n    { id: 1, code: '1000', name: '현금', type: 'asset' },\r\n    { id: 2, code: '1100', name: '은행예금', type: 'asset' },\r\n    { id: 3, code: '2000', name: '미지급금', type: 'liability' },\r\n    { id: 4, code: '3000', name: '자본금', type: 'equity' },\r\n  ];\r\n};\r\n\r\nlet mockAccounts: Account[] = getMockAccounts();\r\n\r\n// Mock 계정과목 데이터를 localStorage에 저장하는 함수\r\nconst saveMockAccounts = (accounts: Account[]) => {\r\n  console.log('계정과목 localStorage에 저장 중:', accounts);\r\n  try {\r\n    localStorage.setItem('odoo_frontend_mock_accounts', JSON.stringify(accounts));\r\n    console.log('계정과목 localStorage 저장 완료');\r\n  } catch (error) {\r\n    console.error('계정과목 localStorage 저장 오류:', error);\r\n  }\r\n};\r\n\r\nconst mockJournalEntries: JournalEntry[] = [\r\n  { id: 1, name: '초기 자본 투입', date: '2024-01-15', ref: 'JE001', state: 'posted', amount_total: 1000000, line_count: 2 },\r\n  { id: 2, name: '은행 예금', date: '2024-01-16', ref: 'JE002', state: 'posted', amount_total: 5000000, line_count: 2 },\r\n];\r\n\r\n// localStorage에서 Mock 데이터를 가져오거나 초기값 사용\r\nconst getMockPartners = (): Partner[] => {\r\n  // 기존 키도 확인하고 삭제\r\n  const oldStored = localStorage.getItem('odoo_frontend_mock_partners');\r\n  if (oldStored) {\r\n    console.log('기존 키 데이터 발견, 삭제 중:', oldStored);\r\n    localStorage.removeItem('odoo_frontend_mock_partners');\r\n  }\r\n  \r\n  const stored = localStorage.getItem('odoo_frontend_mock_partners_v2');\r\n  console.log('localStorage에서 읽은 데이터:', stored);\r\n  if (stored && stored !== 'null' && stored !== 'undefined') {\r\n    try {\r\n      const parsed = JSON.parse(stored);\r\n      console.log('파싱된 데이터:', parsed);\r\n      if (Array.isArray(parsed) && parsed.length > 0) {\r\n        console.log('localStorage에서 유효한 데이터를 찾았습니다.');\r\n        return parsed;\r\n      }\r\n    } catch (error) {\r\n      console.error('JSON 파싱 오류:', error);\r\n      localStorage.removeItem('odoo_frontend_mock_partners_v2');\r\n    }\r\n  }\r\n  console.log('localStorage에 데이터가 없어 초기값 사용');\r\n  return [\r\n    { id: 1, name: 'ABC 회사', email: 'abc@example.com', phone: '02-1234-5678', type: 'customer', active: true },\r\n    { id: 2, name: 'XYZ 공급업체', email: 'xyz@example.com', phone: '02-9876-5432', type: 'supplier', active: true },\r\n  ];\r\n};\r\n\r\nlet mockPartners: Partner[] = getMockPartners();\r\n\r\n// Mock 데이터를 localStorage에 저장하는 함수\r\nconst saveMockPartners = (partners: Partner[]) => {\r\n  console.log('localStorage에 저장 중:', partners);\r\n  try {\r\n    localStorage.setItem('odoo_frontend_mock_partners_v2', JSON.stringify(partners));\r\n    console.log('localStorage 저장 완료');\r\n  } catch (error) {\r\n    console.error('localStorage 저장 오류:', error);\r\n  }\r\n};\r\n\r\nconst mockAssets: Asset[] = [\r\n  { id: 1, name: '컴퓨터', code: 'AST001', category: '전자기기', purchase_date: '2024-01-01', purchase_value: 2000000, current_value: 1500000, depreciation_method: 'straight_line' },\r\n  { id: 2, name: '사무용 책상', code: 'AST002', category: '가구', purchase_date: '2024-01-01', purchase_value: 500000, current_value: 400000, depreciation_method: 'straight_line' },\r\n];\r\n\r\nconst mockBudgets: Budget[] = [\r\n  { id: 1, name: '2024년 예산', fiscal_year: '2024', amount: 10000000, spent_amount: 3000000, remaining_amount: 7000000, state: 'active' },\r\n  { id: 2, name: '마케팅 예산', fiscal_year: '2024', amount: 2000000, spent_amount: 800000, remaining_amount: 1200000, state: 'active' },\r\n];\r\n\r\n// axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Health Check\r\nexport const checkHealth = async (): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    return { success: true, message: 'Mock 모드로 실행 중' };\r\n  }\r\n};\r\n\r\n// 계정과목 API\r\nexport const getAccounts = async (): Promise<ApiResponse<Account[]>> => {\r\n  try {\r\n    const response = await api.get('/accounts');\r\n    return response.data;\r\n  } catch (error) {\r\n    // localStorage에서 최신 Mock 데이터 가져오기\r\n    mockAccounts = getMockAccounts();\r\n    console.log('getAccounts - localStorage에서 가져온 데이터:', mockAccounts);\r\n    return { success: true, data: mockAccounts };\r\n  }\r\n};\r\n\r\nexport const createAccount = async (account: Partial<Account>): Promise<ApiResponse<Account>> => {\r\n  try {\r\n    const response = await api.post('/accounts', account);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터에 추가\r\n    const newAccount = { ...account, id: Date.now() } as Account;\r\n    mockAccounts.push(newAccount);\r\n    saveMockAccounts(mockAccounts);\r\n    return { success: true, data: newAccount };\r\n  }\r\n};\r\n\r\nexport const updateAccount = async (id: number, account: Partial<Account>): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.put(`/accounts/${id}`, account);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 업데이트\r\n    console.log('계정과목 Mock 데이터 업데이트 중:', id, account);\r\n    const index = mockAccounts.findIndex(a => a.id === id);\r\n    if (index !== -1) {\r\n      mockAccounts[index] = { ...mockAccounts[index], ...account };\r\n      saveMockAccounts(mockAccounts);\r\n    }\r\n    return { success: true, message: 'Mock 모드에서 수정됨' };\r\n  }\r\n};\r\n\r\nexport const deleteAccount = async (id: number): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.delete(`/accounts/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터에서 삭제\r\n    console.log('계정과목 Mock 데이터 삭제 중:', id);\r\n    mockAccounts = mockAccounts.filter(a => a.id !== id);\r\n    saveMockAccounts(mockAccounts);\r\n    return { success: true, message: 'Mock 모드에서 삭제됨' };\r\n  }\r\n};\r\n\r\n// 분개장 API\r\nexport const getJournalEntries = async (): Promise<ApiResponse<JournalEntry[]>> => {\r\n  try {\r\n    const response = await api.get('/journal-entries');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockJournalEntries };\r\n  }\r\n};\r\n\r\nexport const createJournalEntry = async (entry: any): Promise<ApiResponse<JournalEntry>> => {\r\n  try {\r\n    const response = await api.post('/journal-entries', entry);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    const newEntry = { ...entry, id: Date.now() } as JournalEntry;\r\n    return { success: true, data: newEntry };\r\n  }\r\n};\r\n\r\n// 거래처 API\r\nexport const getPartners = async (): Promise<ApiResponse<Partner[]>> => {\r\n  // 백엔드 연결을 시도하지 않고 바로 Mock 데이터 사용\r\n  console.log('Mock 모드로 실행 중 - 백엔드 연결 시도하지 않음');\r\n  \r\n  // localStorage에서 최신 Mock 데이터 가져오기\r\n  const stored = localStorage.getItem('odoo_frontend_mock_partners_v2');\r\n  console.log('getPartners - localStorage 원본 데이터:', stored);\r\n  \r\n  if (stored && stored !== 'null' && stored !== 'undefined') {\r\n    try {\r\n      const parsed = JSON.parse(stored);\r\n      console.log('getPartners - 파싱된 데이터:', parsed);\r\n      if (Array.isArray(parsed) && parsed.length > 0) {\r\n        mockPartners = parsed;\r\n        console.log('getPartners - localStorage에서 데이터 사용:', mockPartners);\r\n        return { success: true, data: mockPartners };\r\n      }\r\n    } catch (error) {\r\n      console.error('getPartners - JSON 파싱 오류:', error);\r\n    }\r\n  }\r\n  \r\n  // localStorage에 데이터가 없으면 초기값 사용\r\n  mockPartners = getMockPartners();\r\n  console.log('getPartners - 초기값 사용:', mockPartners);\r\n  return { success: true, data: mockPartners };\r\n};\r\n\r\nexport const createPartner = async (partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\r\n  try {\r\n    const response = await api.post('/partners', partner);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터에 추가\r\n    const newPartner = { ...partner, id: Date.now() } as Partner;\r\n    mockPartners.push(newPartner);\r\n    saveMockPartners(mockPartners);\r\n    return { success: true, data: newPartner };\r\n  }\r\n};\r\n\r\nexport const updatePartner = async (id: number, partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\r\n  try {\r\n    const response = await api.put(`/partners/${id}`, partner);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 업데이트\r\n    console.log('Mock 데이터 업데이트 중:', id, partner);\r\n    console.log('현재 Mock 데이터:', mockPartners);\r\n    const index = mockPartners.findIndex(p => p.id === id);\r\n    console.log('찾은 인덱스:', index);\r\n    if (index !== -1) {\r\n      mockPartners[index] = { ...mockPartners[index], ...partner };\r\n      console.log('업데이트된 Mock 데이터:', mockPartners);\r\n    } else {\r\n      // ID가 없으면 새로 추가\r\n      console.log('ID를 찾을 수 없어 새로 추가합니다.');\r\n      const newPartner = { ...partner, id } as Partner;\r\n      mockPartners.push(newPartner);\r\n    }\r\n    saveMockPartners(mockPartners);\r\n    const updatedPartner = { ...partner, id } as Partner;\r\n    return { success: true, data: updatedPartner };\r\n  }\r\n};\r\n\r\nexport const deletePartner = async (id: number): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.delete(`/partners/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터에서 삭제\r\n    mockPartners = mockPartners.filter(p => p.id !== id);\r\n    saveMockPartners(mockPartners);\r\n    return { success: true, message: 'Mock 모드에서 삭제됨' };\r\n  }\r\n};\r\n\r\n// 고정자산 API\r\nexport const getAssets = async (): Promise<ApiResponse<Asset[]>> => {\r\n  try {\r\n    const response = await api.get('/assets');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockAssets };\r\n  }\r\n};\r\n\r\nexport const createAsset = async (asset: Partial<Asset>): Promise<ApiResponse<Asset>> => {\r\n  try {\r\n    const response = await api.post('/assets', asset);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터로 성공 응답\r\n    const newAsset = { ...asset, id: Date.now() } as Asset;\r\n    return { success: true, data: newAsset };\r\n  }\r\n};\r\n\r\n// 예산 API\r\nexport const getBudgets = async (): Promise<ApiResponse<Budget[]>> => {\r\n  try {\r\n    const response = await api.get('/budgets');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: mockBudgets };\r\n  }\r\n};\r\n\r\n// 통화 API\r\nexport const getCurrencies = async (): Promise<ApiResponse<Currency[]>> => {\r\n  try {\r\n    const response = await api.get('/currencies');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Mock 데이터 반환\r\n    return { success: true, data: [\r\n      { id: 1, name: 'KRW', code: 'KRW', symbol: '₩', rate: 1.0, active: true },\r\n      { id: 2, name: 'USD', code: 'USD', symbol: '$', rate: 1300.0, active: true },\r\n      { id: 3, name: 'EUR', code: 'EUR', symbol: '€', rate: 1400.0, active: true },\r\n    ]};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}