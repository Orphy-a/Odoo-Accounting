{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api/accounting';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('🚀 API 요청:', {\n    method: (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(),\n    url: config.url,\n    data: config.data,\n    headers: config.headers\n  });\n  return config;\n}, error => {\n  console.error('❌ 요청 에러:', error);\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log('✅ API 응답:', {\n    status: response.status,\n    url: response.config.url,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error('❌ 응답 에러:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message\n  });\n  return Promise.reject(error);\n});\n\n// Health Check\nexport const checkHealth = async () => {\n  try {\n    console.log('API 호출 - checkHealth: GET /health');\n    const response = await api.get('/health');\n    console.log('API 응답 - checkHealth:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('checkHealth 에러:', error);\n    return {\n      success: false,\n      message: '백엔드 서버와 통신에 실패했습니다.'\n    };\n  }\n};\n\n// 계정과목 API\nexport const getAccounts = async () => {\n  try {\n    console.log('API 호출 - getAccounts: GET /accounts');\n    const response = await api.get('/accounts');\n    console.log('API 응답 - getAccounts:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('getAccounts 에러:', error);\n    return {\n      success: false,\n      message: '계정과목 조회 실패'\n    };\n  }\n};\nexport const createAccount = async account => {\n  try {\n    console.log('API 호출 - createAccount: POST /accounts', account);\n    const response = await api.post('/accounts', account);\n    console.log('API 응답 - createAccount:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('createAccount 에러:', error);\n    return {\n      success: false,\n      message: '계정과목 생성 실패'\n    };\n  }\n};\nexport const updateAccount = async (id, account) => {\n  try {\n    console.log('API 호출 - updateAccount: PUT /accounts/' + id, account);\n    const response = await api.put(`/accounts/${id}`, account);\n    console.log('API 응답 - updateAccount:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('updateAccount 에러:', error);\n    return {\n      success: false,\n      message: '계정과목 수정 실패'\n    };\n  }\n};\nexport const deleteAccount = async id => {\n  try {\n    console.log('API 호출 - deleteAccount: DELETE /accounts/' + id);\n    const response = await api.delete(`/accounts/${id}`);\n    console.log('API 응답 - deleteAccount:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('deleteAccount 에러:', error);\n    return {\n      success: false,\n      message: '계정과목 삭제 실패'\n    };\n  }\n};\n\n// 분개장 API\nexport const getJournalEntries = async () => {\n  try {\n    console.log('API 호출 - getJournalEntries: GET /journal-entries');\n    const response = await api.get('/journal-entries');\n    console.log('API 응답 - getJournalEntries:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('getJournalEntries 에러:', error);\n    return {\n      success: false,\n      message: '분개장 조회 실패'\n    };\n  }\n};\nexport const createJournalEntry = async entry => {\n  try {\n    console.log('API 호출 - createJournalEntry: POST /journal-entries', entry);\n    const response = await api.post('/journal-entries', entry);\n    console.log('API 응답 - createJournalEntry:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('createJournalEntry 에러:', error);\n    return {\n      success: false,\n      message: '분개장 생성 실패'\n    };\n  }\n};\nexport const updateJournalEntry = async (id, entry) => {\n  try {\n    console.log('API 호출 - updateJournalEntry: PUT /journal-entries/' + id, entry);\n    const response = await api.put(`/journal-entries/${id}`, entry);\n    console.log('API 응답 - updateJournalEntry:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('updateJournalEntry 에러:', error);\n    return {\n      success: false,\n      message: '분개장 수정 실패'\n    };\n  }\n};\nexport const deleteJournalEntry = async id => {\n  try {\n    console.log('API 호출 - deleteJournalEntry: DELETE /journal-entries/' + id);\n    const response = await api.delete(`/journal-entries/${id}`);\n    console.log('API 응답 - deleteJournalEntry:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('deleteJournalEntry 에러:', error);\n    return {\n      success: false,\n      message: '분개장 삭제 실패'\n    };\n  }\n};\n\n// 거래처 API\nexport const getPartners = async () => {\n  try {\n    console.log('API 호출 - getPartners: GET /partners');\n    const response = await api.get('/partners');\n    console.log('API 응답 - getPartners:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('getPartners 에러:', error);\n    return {\n      success: false,\n      message: '거래처 조회 실패'\n    };\n  }\n};\nexport const createPartner = async partner => {\n  try {\n    console.log('API 호출 - createPartner: POST /partners', partner);\n    const response = await api.post('/partners', partner);\n    console.log('API 응답 - createPartner:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('createPartner 에러:', error);\n    return {\n      success: false,\n      message: '거래처 생성 실패'\n    };\n  }\n};\nexport const updatePartner = async (id, partner) => {\n  try {\n    console.log('API 호출 - updatePartner:', {\n      id,\n      partner\n    });\n    const response = await api.put(`/partners/${id}`, partner);\n    console.log('API 응답 - updatePartner:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error('updatePartner 에러:', error);\n    console.error('에러 응답:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n    return {\n      success: false,\n      message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message || '거래처 수정 실패'\n    };\n  }\n};\nexport const deletePartner = async id => {\n  try {\n    const response = await api.delete(`/partners/${id}`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '거래처 삭제 실패'\n    };\n  }\n};\n\n// 고정자산 API\nexport const getAssets = async () => {\n  try {\n    const response = await api.get('/assets');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '자산 조회 실패'\n    };\n  }\n};\nexport const createAsset = async asset => {\n  try {\n    const response = await api.post('/assets', asset);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '자산 생성 실패'\n    };\n  }\n};\nexport const updateAsset = async (id, asset) => {\n  try {\n    const response = await api.put(`/assets/${id}`, asset);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '자산 수정 실패'\n    };\n  }\n};\nexport const deleteAsset = async id => {\n  try {\n    const response = await api.delete(`/assets/${id}`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '자산 삭제 실패'\n    };\n  }\n};\nexport const depreciateAssets = async assetIds => {\n  try {\n    const response = await api.post('/assets/depreciate', {\n      asset_ids: assetIds\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '감가상각 실행 실패'\n    };\n  }\n};\n\n// 세금 API\nexport const getTaxes = async () => {\n  try {\n    const response = await api.get('/taxes');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 조회 실패'\n    };\n  }\n};\nexport const createTax = async tax => {\n  try {\n    // 코드는 백엔드에서 자동 생성되므로 제외\n    const {\n      code,\n      ...taxData\n    } = tax;\n    const response = await api.post('/taxes', taxData);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 생성 실패'\n    };\n  }\n};\nexport const updateTax = async (id, tax) => {\n  try {\n    // 코드는 수정 불가능하므로 제외\n    const {\n      code,\n      ...taxData\n    } = tax;\n    const response = await api.put(`/taxes/${id}`, taxData);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 수정 실패'\n    };\n  }\n};\nexport const deleteTax = async id => {\n  try {\n    const response = await api.delete(`/taxes/${id}`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 삭제 실패'\n    };\n  }\n};\nexport const calculateTax = async (supplyAmount, taxRate) => {\n  try {\n    const response = await api.post('/taxes/calculate', {\n      supply_amount: supplyAmount,\n      tax_rate: taxRate\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 계산 실패'\n    };\n  }\n};\n\n// 세금 신고서 API\nexport const getTaxReports = async () => {\n  try {\n    const response = await api.get('/tax-reports');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 신고서 조회 실패'\n    };\n  }\n};\nexport const createTaxReport = async report => {\n  try {\n    // 백엔드에 보낼 데이터 구조 변환\n    const reportData = {\n      name: report.name,\n      report_type: report.report_type,\n      additional_period: report.additional_period,\n      tax_ids: report.tax_ids,\n      vat_payable: report.vat_payable || 0,\n      sale_vat_amount: 0,\n      purchase_vat_amount: 0,\n      exempt_amount: 0,\n      zero_rated_amount: 0,\n      withholding_amount: 0,\n      state: 'draft'\n    };\n    console.log('🚀 세금 신고서 생성 요청 데이터:', reportData);\n    const response = await api.post('/tax-reports', reportData);\n    console.log('✅ 세금 신고서 생성 응답:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ 세금 신고서 생성 에러:', error);\n    return {\n      success: false,\n      message: '세금 신고서 생성 실패'\n    };\n  }\n};\nexport const updateTaxReport = async (id, report) => {\n  try {\n    // 백엔드에 보낼 데이터 구조 변환\n    const reportData = {\n      name: report.name,\n      report_type: report.report_type,\n      additional_period: report.additional_period,\n      tax_ids: report.tax_ids,\n      vat_payable: report.vat_payable || 0,\n      sale_vat_amount: report.sale_vat_amount || 0,\n      purchase_vat_amount: report.purchase_vat_amount || 0,\n      exempt_amount: report.exempt_amount || 0,\n      zero_rated_amount: report.zero_rated_amount || 0,\n      withholding_amount: report.withholding_amount || 0\n    };\n    console.log('🚀 세금 신고서 수정 요청 데이터:', reportData);\n    const response = await api.put(`/tax-reports/${id}`, reportData);\n    console.log('✅ 세금 신고서 수정 응답:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ 세금 신고서 수정 에러:', error);\n    return {\n      success: false,\n      message: '세금 신고서 수정 실패'\n    };\n  }\n};\nexport const deleteTaxReport = async id => {\n  try {\n    const response = await api.delete(`/tax-reports/${id}`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '세금 신고서 삭제 실패'\n    };\n  }\n};\nexport const generateTaxReportData = async id => {\n  try {\n    const response = await api.post(`/tax-reports/${id}/generate`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '신고서 데이터 생성 실패'\n    };\n  }\n};\n\n// 예산 API\nexport const getBudgets = async () => {\n  try {\n    const response = await api.get('/budgets');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '예산 조회 실패'\n    };\n  }\n};\n\n// 통화 API\nexport const getCurrencies = async () => {\n  try {\n    const response = await api.get('/currencies');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '통화 조회 실패'\n    };\n  }\n};\nexport const runAutoJournalEntries = async rules => {\n  try {\n    const response = await api.post('/auto-journal-entries', {\n      rules\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      message: '자동분개 실행 실패'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$config","_error$response2","message","checkHealth","get","success","getAccounts","createAccount","account","post","updateAccount","id","put","deleteAccount","delete","getJournalEntries","createJournalEntry","entry","updateJournalEntry","deleteJournalEntry","getPartners","createPartner","partner","updatePartner","_error$response3","_error$response4","_error$response4$data","deletePartner","getAssets","createAsset","asset","updateAsset","deleteAsset","depreciateAssets","assetIds","asset_ids","getTaxes","createTax","tax","code","taxData","updateTax","deleteTax","calculateTax","supplyAmount","taxRate","supply_amount","tax_rate","getTaxReports","createTaxReport","report","reportData","name","report_type","additional_period","tax_ids","vat_payable","sale_vat_amount","purchase_vat_amount","exempt_amount","zero_rated_amount","withholding_amount","state","updateTaxReport","deleteTaxReport","generateTaxReportData","getBudgets","getCurrencies","runAutoJournalEntries","rules"],"sources":["C:/Users/jaeyeong/Desktop/workspace/odoo-frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ApiResponse, Account, JournalEntry, Partner, Asset, Budget, Currency, Tax, TaxCalculation, TaxReport } from '../types';\n\nconst API_BASE_URL = '/api/accounting';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    console.log('🚀 API 요청:', {\n      method: config.method?.toUpperCase(),\n      url: config.url,\n      data: config.data,\n      headers: config.headers,\n    });\n    return config;\n  },\n  (error) => {\n    console.error('❌ 요청 에러:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log('✅ API 응답:', {\n      status: response.status,\n      url: response.config.url,\n      data: response.data,\n    });\n    return response;\n  },\n  (error) => {\n    console.error('❌ 응답 에러:', {\n      status: error.response?.status,\n      url: error.config?.url,\n      data: error.response?.data,\n      message: error.message,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Health Check\nexport const checkHealth = async (): Promise<ApiResponse> => {\n  try {\n    console.log('API 호출 - checkHealth: GET /health');\n    const response = await api.get('/health');\n    console.log('API 응답 - checkHealth:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('checkHealth 에러:', error);\n    return { success: false, message: '백엔드 서버와 통신에 실패했습니다.' };\n  }\n};\n\n// 계정과목 API\nexport const getAccounts = async (): Promise<ApiResponse<Account[]>> => {\n  try {\n    console.log('API 호출 - getAccounts: GET /accounts');\n    const response = await api.get('/accounts');\n    console.log('API 응답 - getAccounts:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('getAccounts 에러:', error);\n    return { success: false, message: '계정과목 조회 실패' };\n  }\n};\n\nexport const createAccount = async (account: Partial<Account>): Promise<ApiResponse<Account>> => {\n  try {\n    console.log('API 호출 - createAccount: POST /accounts', account);\n    const response = await api.post('/accounts', account);\n    console.log('API 응답 - createAccount:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('createAccount 에러:', error);\n    return { success: false, message: '계정과목 생성 실패' };\n  }\n};\n\nexport const updateAccount = async (id: number, account: Partial<Account>): Promise<ApiResponse> => {\n  try {\n    console.log('API 호출 - updateAccount: PUT /accounts/' + id, account);\n    const response = await api.put(`/accounts/${id}`, account);\n    console.log('API 응답 - updateAccount:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('updateAccount 에러:', error);\n    return { success: false, message: '계정과목 수정 실패' };\n  }\n};\n\nexport const deleteAccount = async (id: number): Promise<ApiResponse> => {\n  try {\n    console.log('API 호출 - deleteAccount: DELETE /accounts/' + id);\n    const response = await api.delete(`/accounts/${id}`);\n    console.log('API 응답 - deleteAccount:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('deleteAccount 에러:', error);\n    return { success: false, message: '계정과목 삭제 실패' };\n  }\n};\n\n// 분개장 API\nexport const getJournalEntries = async (): Promise<ApiResponse<JournalEntry[]>> => {\n  try {\n    console.log('API 호출 - getJournalEntries: GET /journal-entries');\n    const response = await api.get('/journal-entries');\n    console.log('API 응답 - getJournalEntries:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('getJournalEntries 에러:', error);\n    return { success: false, message: '분개장 조회 실패' };\n  }\n};\n\nexport const createJournalEntry = async (entry: any): Promise<ApiResponse<JournalEntry>> => {\n  try {\n    console.log('API 호출 - createJournalEntry: POST /journal-entries', entry);\n    const response = await api.post('/journal-entries', entry);\n    console.log('API 응답 - createJournalEntry:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('createJournalEntry 에러:', error);\n    return { success: false, message: '분개장 생성 실패' };\n  }\n};\n\nexport const updateJournalEntry = async (id: number, entry: any): Promise<ApiResponse<JournalEntry>> => {\n  try {\n    console.log('API 호출 - updateJournalEntry: PUT /journal-entries/' + id, entry);\n    const response = await api.put(`/journal-entries/${id}`, entry);\n    console.log('API 응답 - updateJournalEntry:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('updateJournalEntry 에러:', error);\n    return { success: false, message: '분개장 수정 실패' };\n  }\n};\n\nexport const deleteJournalEntry = async (id: number): Promise<ApiResponse> => {\n  try {\n    console.log('API 호출 - deleteJournalEntry: DELETE /journal-entries/' + id);\n    const response = await api.delete(`/journal-entries/${id}`);\n    console.log('API 응답 - deleteJournalEntry:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('deleteJournalEntry 에러:', error);\n    return { success: false, message: '분개장 삭제 실패' };\n  }\n};\n\n// 거래처 API\nexport const getPartners = async (): Promise<ApiResponse<Partner[]>> => {\n  try {\n    console.log('API 호출 - getPartners: GET /partners');\n    const response = await api.get('/partners');\n    console.log('API 응답 - getPartners:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('getPartners 에러:', error);\n    return { success: false, message: '거래처 조회 실패' };\n  }\n};\n\nexport const createPartner = async (partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\n  try {\n    console.log('API 호출 - createPartner: POST /partners', partner);\n    const response = await api.post('/partners', partner);\n    console.log('API 응답 - createPartner:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('createPartner 에러:', error);\n    return { success: false, message: '거래처 생성 실패' };\n  }\n};\n\nexport const updatePartner = async (id: number, partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\n  try {\n    console.log('API 호출 - updatePartner:', { id, partner });\n    const response = await api.put(`/partners/${id}`, partner);\n    console.log('API 응답 - updatePartner:', response.data);\n    return response.data;\n  } catch (error: any) {\n    console.error('updatePartner 에러:', error);\n    console.error('에러 응답:', error.response?.data);\n    return { \n      success: false, \n      message: error.response?.data?.message || error.message || '거래처 수정 실패' \n    };\n  }\n};\n\nexport const deletePartner = async (id: number): Promise<ApiResponse> => {\n  try {\n    const response = await api.delete(`/partners/${id}`);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '거래처 삭제 실패' };\n  }\n};\n\n// 고정자산 API\nexport const getAssets = async (): Promise<ApiResponse<Asset[]>> => {\n  try {\n    const response = await api.get('/assets');\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '자산 조회 실패' };\n  }\n};\n\nexport const createAsset = async (asset: Partial<Asset>): Promise<ApiResponse<Asset>> => {\n  try {\n    const response = await api.post('/assets', asset);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '자산 생성 실패' };\n  }\n};\n\nexport const updateAsset = async (id: number, asset: Partial<Asset>): Promise<ApiResponse<Asset>> => {\n  try {\n    const response = await api.put(`/assets/${id}`, asset);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '자산 수정 실패' };\n  }\n};\n\nexport const deleteAsset = async (id: number): Promise<ApiResponse> => {\n  try {\n    const response = await api.delete(`/assets/${id}`);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '자산 삭제 실패' };\n  }\n};\n\nexport const depreciateAssets = async (assetIds: number[]): Promise<ApiResponse<any[]>> => {\n  try {\n    const response = await api.post('/assets/depreciate', { asset_ids: assetIds });\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '감가상각 실행 실패' };\n  }\n};\n\n// 세금 API\nexport const getTaxes = async (): Promise<ApiResponse<Tax[]>> => {\n  try {\n    const response = await api.get('/taxes');\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 조회 실패' };\n  }\n};\n\nexport const createTax = async (tax: Partial<Tax>): Promise<ApiResponse<Tax>> => {\n  try {\n    // 코드는 백엔드에서 자동 생성되므로 제외\n    const { code, ...taxData } = tax;\n    const response = await api.post('/taxes', taxData);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 생성 실패' };\n  }\n};\n\nexport const updateTax = async (id: number, tax: Partial<Tax>): Promise<ApiResponse<Tax>> => {\n  try {\n    // 코드는 수정 불가능하므로 제외\n    const { code, ...taxData } = tax;\n    const response = await api.put(`/taxes/${id}`, taxData);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 수정 실패' };\n  }\n};\n\nexport const deleteTax = async (id: number): Promise<ApiResponse> => {\n  try {\n    const response = await api.delete(`/taxes/${id}`);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 삭제 실패' };\n  }\n};\n\nexport const calculateTax = async (supplyAmount: number, taxRate: number): Promise<ApiResponse<TaxCalculation>> => {\n  try {\n    const response = await api.post('/taxes/calculate', { \n      supply_amount: supplyAmount, \n      tax_rate: taxRate \n    });\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 계산 실패' };\n  }\n};\n\n// 세금 신고서 API\nexport const getTaxReports = async (): Promise<ApiResponse<TaxReport[]>> => {\n  try {\n    const response = await api.get('/tax-reports');\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 신고서 조회 실패' };\n  }\n};\n\nexport const createTaxReport = async (report: Partial<TaxReport>): Promise<ApiResponse<TaxReport>> => {\n  try {\n    // 백엔드에 보낼 데이터 구조 변환\n    const reportData = {\n      name: report.name,\n      report_type: report.report_type,\n      additional_period: report.additional_period,\n      tax_ids: report.tax_ids,\n      vat_payable: report.vat_payable || 0,\n      sale_vat_amount: 0,\n      purchase_vat_amount: 0,\n      exempt_amount: 0,\n      zero_rated_amount: 0,\n      withholding_amount: 0,\n      state: 'draft'\n    };\n    \n    console.log('🚀 세금 신고서 생성 요청 데이터:', reportData);\n    const response = await api.post('/tax-reports', reportData);\n    console.log('✅ 세금 신고서 생성 응답:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ 세금 신고서 생성 에러:', error);\n    return { success: false, message: '세금 신고서 생성 실패' };\n  }\n};\n\nexport const updateTaxReport = async (id: number, report: Partial<TaxReport>): Promise<ApiResponse<TaxReport>> => {\n  try {\n    // 백엔드에 보낼 데이터 구조 변환\n    const reportData = {\n      name: report.name,\n      report_type: report.report_type,\n      additional_period: report.additional_period,\n      tax_ids: report.tax_ids,\n      vat_payable: report.vat_payable || 0,\n      sale_vat_amount: report.sale_vat_amount || 0,\n      purchase_vat_amount: report.purchase_vat_amount || 0,\n      exempt_amount: report.exempt_amount || 0,\n      zero_rated_amount: report.zero_rated_amount || 0,\n      withholding_amount: report.withholding_amount || 0\n    };\n    \n    console.log('🚀 세금 신고서 수정 요청 데이터:', reportData);\n    const response = await api.put(`/tax-reports/${id}`, reportData);\n    console.log('✅ 세금 신고서 수정 응답:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ 세금 신고서 수정 에러:', error);\n    return { success: false, message: '세금 신고서 수정 실패' };\n  }\n};\n\nexport const deleteTaxReport = async (id: number): Promise<ApiResponse> => {\n  try {\n    const response = await api.delete(`/tax-reports/${id}`);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '세금 신고서 삭제 실패' };\n  }\n};\n\nexport const generateTaxReportData = async (id: number): Promise<ApiResponse<TaxReport>> => {\n  try {\n    const response = await api.post(`/tax-reports/${id}/generate`);\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '신고서 데이터 생성 실패' };\n  }\n};\n\n// 예산 API\nexport const getBudgets = async (): Promise<ApiResponse<Budget[]>> => {\n  try {\n    const response = await api.get('/budgets');\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '예산 조회 실패' };\n  }\n};\n\n// 통화 API\nexport const getCurrencies = async (): Promise<ApiResponse<Currency[]>> => {\n  try {\n    const response = await api.get('/currencies');\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '통화 조회 실패' };\n  }\n};\n\nexport const runAutoJournalEntries = async (rules: any[]): Promise<ApiResponse<any[]>> => {\n  try {\n    const response = await api.post('/auto-journal-entries', { rules });\n    return response.data;\n  } catch (error) {\n    return { success: false, message: '자동분개 실행 실패' };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}