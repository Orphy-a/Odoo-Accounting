{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api/accounting';\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Health Check\nexport const checkHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: 'API 연결 실패'\n    };\n  }\n};\n\n// 계정과목 API\nexport const getAccounts = async () => {\n  try {\n    const response = await api.get('/accounts');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '계정과목 조회 실패'\n    };\n  }\n};\nexport const createAccount = async account => {\n  try {\n    const response = await api.post('/accounts', account);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '계정과목 생성 실패'\n    };\n  }\n};\nexport const updateAccount = async (id, account) => {\n  try {\n    const response = await api.put(`/accounts/${id}`, account);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '계정과목 수정 실패'\n    };\n  }\n};\nexport const deleteAccount = async id => {\n  try {\n    const response = await api.delete(`/accounts/${id}`);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '계정과목 삭제 실패'\n    };\n  }\n};\n\n// 분개장 API\nexport const getJournalEntries = async () => {\n  try {\n    const response = await api.get('/journal-entries');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '분개장 조회 실패'\n    };\n  }\n};\nexport const createJournalEntry = async entry => {\n  try {\n    const response = await api.post('/journal-entries', entry);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '분개장 생성 실패'\n    };\n  }\n};\n\n// 거래처 API\nexport const getPartners = async () => {\n  try {\n    const response = await api.get('/partners');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '거래처 조회 실패'\n    };\n  }\n};\nexport const createPartner = async partner => {\n  try {\n    const response = await api.post('/partners', partner);\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '거래처 생성 실패'\n    };\n  }\n};\n\n// 고정자산 API\nexport const getAssets = async () => {\n  try {\n    const response = await api.get('/assets');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '고정자산 조회 실패'\n    };\n  }\n};\n\n// 예산 API\nexport const getBudgets = async () => {\n  try {\n    const response = await api.get('/budgets');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '예산 조회 실패'\n    };\n  }\n};\n\n// 통화 API\nexport const getCurrencies = async () => {\n  try {\n    const response = await api.get('/currencies');\n    return response.data;\n  } catch (error) {\n    return {\n      success: false,\n      error: '통화 조회 실패'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","checkHealth","response","get","data","error","success","getAccounts","createAccount","account","post","updateAccount","id","put","deleteAccount","delete","getJournalEntries","createJournalEntry","entry","getPartners","createPartner","partner","getAssets","getBudgets","getCurrencies"],"sources":["C:/Users/jaeyeong/Desktop/workspace/odoo-frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ApiResponse, Account, JournalEntry, Partner, Asset, Budget, Currency } from '../types';\r\n\r\nconst API_BASE_URL = '/api/accounting';\r\n\r\n// axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Health Check\r\nexport const checkHealth = async (): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: 'API 연결 실패' };\r\n  }\r\n};\r\n\r\n// 계정과목 API\r\nexport const getAccounts = async (): Promise<ApiResponse<Account[]>> => {\r\n  try {\r\n    const response = await api.get('/accounts');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '계정과목 조회 실패' };\r\n  }\r\n};\r\n\r\nexport const createAccount = async (account: Partial<Account>): Promise<ApiResponse<Account>> => {\r\n  try {\r\n    const response = await api.post('/accounts', account);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '계정과목 생성 실패' };\r\n  }\r\n};\r\n\r\nexport const updateAccount = async (id: number, account: Partial<Account>): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.put(`/accounts/${id}`, account);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '계정과목 수정 실패' };\r\n  }\r\n};\r\n\r\nexport const deleteAccount = async (id: number): Promise<ApiResponse> => {\r\n  try {\r\n    const response = await api.delete(`/accounts/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '계정과목 삭제 실패' };\r\n  }\r\n};\r\n\r\n// 분개장 API\r\nexport const getJournalEntries = async (): Promise<ApiResponse<JournalEntry[]>> => {\r\n  try {\r\n    const response = await api.get('/journal-entries');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '분개장 조회 실패' };\r\n  }\r\n};\r\n\r\nexport const createJournalEntry = async (entry: any): Promise<ApiResponse<JournalEntry>> => {\r\n  try {\r\n    const response = await api.post('/journal-entries', entry);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '분개장 생성 실패' };\r\n  }\r\n};\r\n\r\n// 거래처 API\r\nexport const getPartners = async (): Promise<ApiResponse<Partner[]>> => {\r\n  try {\r\n    const response = await api.get('/partners');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '거래처 조회 실패' };\r\n  }\r\n};\r\n\r\nexport const createPartner = async (partner: Partial<Partner>): Promise<ApiResponse<Partner>> => {\r\n  try {\r\n    const response = await api.post('/partners', partner);\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '거래처 생성 실패' };\r\n  }\r\n};\r\n\r\n// 고정자산 API\r\nexport const getAssets = async (): Promise<ApiResponse<Asset[]>> => {\r\n  try {\r\n    const response = await api.get('/assets');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '고정자산 조회 실패' };\r\n  }\r\n};\r\n\r\n// 예산 API\r\nexport const getBudgets = async (): Promise<ApiResponse<Budget[]>> => {\r\n  try {\r\n    const response = await api.get('/budgets');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '예산 조회 실패' };\r\n  }\r\n};\r\n\r\n// 통화 API\r\nexport const getCurrencies = async (): Promise<ApiResponse<Currency[]>> => {\r\n  try {\r\n    const response = await api.get('/currencies');\r\n    return response.data;\r\n  } catch (error) {\r\n    return { success: false, error: '통화 조회 실패' };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}